{"ast":null,"code":"import{createContext,useContext,useEffect,useState}from\"react\";import{useNavigate}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";const ChatContext=/*#__PURE__*/createContext();const ChatProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState();const[selectedChat,setSelectedChat]=useState();const[chats,setChats]=useState([]);const[notification,setNotification]=useState([]);const navigation=useNavigate();useEffect(()=>{const userInfo=JSON.parse(localStorage.getItem(\"userInfo\"));setUser(userInfo);if(!userInfo){navigation(\"/\");}},[navigation]);return/*#__PURE__*/_jsx(ChatContext.Provider,{value:{user,setUser,selectedChat,setSelectedChat,chats,setChats,notification,setNotification},children:children});};export const ChatState=()=>{return useContext(ChatContext);};export default ChatProvider;","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useNavigate","jsx","_jsx","ChatContext","ChatProvider","_ref","children","user","setUser","selectedChat","setSelectedChat","chats","setChats","notification","setNotification","navigation","userInfo","JSON","parse","localStorage","getItem","Provider","value","ChatState"],"sources":["C:/Users/nikit/MearnChatApp/frontend/src/context/chatProvider.js"],"sourcesContent":["import {createContext, useContext, useEffect, useState} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n    const [user, setUser] = useState();\r\n    const [selectedChat, setSelectedChat] = useState();\r\n    const [chats, setChats] = useState([]);\r\n    const [notification, setNotification] = useState([]);\r\n    const navigation = useNavigate();\r\n\r\n    useEffect(()=> {\r\n        const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        setUser(userInfo)\r\n        if(!userInfo){\r\n            navigation(\"/\")\r\n        }\r\n    },[navigation])\r\n\r\n    return (\r\n        <ChatContext.Provider value={{ user, setUser, selectedChat,setSelectedChat, chats, setChats, notification, setNotification }}>\r\n            {children}\r\n        </ChatContext.Provider>\r\n    )\r\n}\r\n\r\n\r\nexport const ChatState = () => {\r\n    return useContext(ChatContext)\r\n};\r\n\r\nexport default ChatProvider;"],"mappings":"AAAA,OAAQA,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAO,OAAO,CACpE,OAAQC,WAAW,KAAO,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAG7C,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,CAAC,CAEnC,KAAM,CAAAQ,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC9B,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,CAAC,CAClC,KAAM,CAACU,YAAY,CAAEC,eAAe,CAAC,CAAGX,QAAQ,CAAC,CAAC,CAClD,KAAM,CAACY,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACc,YAAY,CAAEC,eAAe,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAAAgB,UAAU,CAAGf,WAAW,CAAC,CAAC,CAEhCF,SAAS,CAAC,IAAK,CACX,KAAM,CAAAkB,QAAQ,CAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAC7DZ,OAAO,CAACQ,QAAQ,CAAC,CACjB,GAAG,CAACA,QAAQ,CAAC,CACTD,UAAU,CAAC,GAAG,CAAC,CACnB,CACJ,CAAC,CAAC,CAACA,UAAU,CAAC,CAAC,CAEf,mBACIb,IAAA,CAACC,WAAW,CAACkB,QAAQ,EAACC,KAAK,CAAE,CAAEf,IAAI,CAAEC,OAAO,CAAEC,YAAY,CAACC,eAAe,CAAEC,KAAK,CAAEC,QAAQ,CAAEC,YAAY,CAAEC,eAAgB,CAAE,CAAAR,QAAA,CACxHA,QAAQ,CACS,CAAC,CAE/B,CAAC,CAGD,MAAO,MAAM,CAAAiB,SAAS,CAAGA,CAAA,GAAM,CAC3B,MAAO,CAAA1B,UAAU,CAACM,WAAW,CAAC,CAClC,CAAC,CAED,cAAe,CAAAC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}